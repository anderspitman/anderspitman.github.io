<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Anders Pitman&#39;s blog</title>
    <link>http://anderspitman.com/post/index.xml</link>
    <description>Recent content in Posts on Anders Pitman&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](http://gohugo.io).</copyright>
    <lastBuildDate>Wed, 17 Dec 2014 17:30:55 +0000</lastBuildDate>
    <atom:link href="http://anderspitman.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fix for Vimium that Stopped Working</title>
      <link>http://anderspitman.com/2014/12/17/fix-for-vimium-that-stopped-working/</link>
      <pubDate>Wed, 17 Dec 2014 17:30:55 +0000</pubDate>
      
      <guid>http://anderspitman.com/2014/12/17/fix-for-vimium-that-stopped-working/</guid>
      <description>&lt;p&gt;I love the
&lt;a href=&#34;http://vimium.github.io/&#34;&gt;Vimium extension for Chrome&lt;/a&gt;.
It basically provides VIM
keybindings for Chrome. But some of the bindings randomly quit working a
while back, probably after a Chrome update. A quick search didn&amp;rsquo;t yield a
simple fix, so I just put up with it for an embarrassingly long time.
Finally today I did a bit more digging. Some of the issues on github seemed
to indicate local Chrome data might get messed up from updates. My solution
was to delete &lt;code&gt;~/.config/google-chrome&lt;/code&gt; (actually
moved it to &lt;code&gt;~/.config/google-chrome.bak&lt;/code&gt; just in case). I believe this
basically
removes all the local data for chrome, as if you had just installed it for the
first time. After starting Chrome back up and logging into my account, Vimium
is working again! I&amp;rsquo;m running Ubuntu 14.04 with Chrome 38 as of this
writing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Install the Google Play Store on Your Amazon Fire Phone</title>
      <link>http://anderspitman.com/2014/12/01/how-to-install-the-play-store-on-your-fire-phone/</link>
      <pubDate>Mon, 01 Dec 2014 22:43:09 +0000</pubDate>
      
      <guid>http://anderspitman.com/2014/12/01/how-to-install-the-play-store-on-your-fire-phone/</guid>
      <description>

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;The last few days Amazon has been
&lt;a href=&#34;http://www.cnet.com/news/amazon-slashes-price-of-unlocked-fire-phone-to-199/&#34;&gt;having a &amp;ldquo;fire sale&amp;rdquo;&lt;/a&gt;
selling their fire phone for 199USD unlocked and off contract, plus a year
of Amazon prime (~99USD). Given the hardware this was a little to good for me
to pass up. Arguably the biggest problem with the Fire Phone (and all Amazon&amp;rsquo;s
devices) is that it doesn&amp;rsquo;t have access to Google&amp;rsquo;s Play Store, and the OS and
bootloader are locked down tight which makes it somewhere between difficult
and impossible to install ROMs at the moment.&lt;/p&gt;

&lt;p&gt;One short term solution is to sideload the Google Play Store in order to install some of the missing apps. I spent a solid couple of hours trying to figure this out so thought I would summarize what I&amp;rsquo;ve learned. I can&amp;rsquo;t take credit for this information. It&amp;rsquo;s basically a combination of
&lt;a href=&#34;http://forum.xda-developers.com/fire-phone/general/fire-phone-firesale-t2860852&#34;&gt;this XDA forum thread&lt;/a&gt; and
&lt;a href=&#34;http://www.epubor.com/how-to-install-google-play-on-kindle-fire.html&#34;&gt;this blog post&lt;/a&gt;. Those guys are the real wizards. I&amp;rsquo;m repeating the information here to make it easier for people with the Fire Phone to find. I can confirm that these steps work on the Fire Phone running FireOS 3.6.8.&lt;/p&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;

&lt;h3 id=&#34;download-the-files&#34;&gt;Download the files&lt;/h3&gt;

&lt;p&gt;Download each of the following APK files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dropbox.com/s/nlayv7mxwfa3wnu/GoogleServicesFramework.apk&#34;&gt;Google Service Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dropbox.com/s/vlksi5ltazofw1q/GoogleLoginService.apk&#34;&gt;Google Login Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dropbox.com/s/mmfh4dpvaqhr7uv/Google%20Play%20services_3.2.25%20%28761454-36%29.apk&#34;&gt;Google Play Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dropbox.com/s/8uwbw6bcfiftb4m/Google%20Play%20Store%204.1.10.apk&#34;&gt;Google Play Store&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;tansfer-apks-to-phone&#34;&gt;Tansfer APKs to Phone&lt;/h3&gt;

&lt;p&gt;I swear this was the hardest part. You need to find a way to get the files onto
the phone. If you can plug the phone in and transfer over USB that would
probably be the easiest. I&amp;rsquo;m using Linux and didn&amp;rsquo;t want to go throught the
trouble of figuring that out. I ended up
&lt;a href=&#34;https://www.dropbox.com/android&#34;&gt;sideloading Dropbox&lt;/a&gt; and transferring them
that way.&lt;/p&gt;

&lt;h3 id=&#34;enable-apk-app-installation&#34;&gt;Enable APK App Installation&lt;/h3&gt;

&lt;p&gt;On the phone, go into &lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Applications &amp;amp; Parental Controls&lt;/strong&gt; &amp;gt; &lt;strong&gt;Prevent
non-Amazon app installation&lt;/strong&gt; and flip the &lt;strong&gt;App Installation&lt;/strong&gt; Switch to &lt;strong&gt;ON&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;install-file-explorer&#34;&gt;Install File Explorer&lt;/h3&gt;

&lt;p&gt;Open the Amazon App Store and install ES File Explorer or another file browsing
app.&lt;/p&gt;

&lt;h3 id=&#34;install-the-apks&#34;&gt;Install the APKs&lt;/h3&gt;

&lt;p&gt;Using the file explorer (or Dropbox, etc), navigate to the files you
downloaded, and install them one by one in the same order you downloaded them. Be sure to
&lt;strong&gt;reboot between each installation&lt;/strong&gt;. I don&amp;rsquo;t know how important that is but
that&amp;rsquo;s what I did and it worked. After they are all installed you should be
able to launch the Play Store, log in with your Google account, and start
installing stuff. Currently I&amp;rsquo;m using Hangouts and Gmail and they seem to work
fine. Maps basically works but has some corrupted visuals. YMMV.&lt;/p&gt;

&lt;p&gt;NOTE: Initially I wasn&amp;rsquo;t able to log into my google account because I had
Google&amp;rsquo;s &lt;a href=&#34;https://www.google.com/landing/2step/&#34;&gt;2 factor authentication&lt;/a&gt;
enabled. I disabled it and it worked fine. If anyone finds a workaround let me
know.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chrome Extension PubSub</title>
      <link>http://anderspitman.com/2014/08/30/chrome-extension-pubsub/</link>
      <pubDate>Sat, 30 Aug 2014 22:35:24 +0000</pubDate>
      
      <guid>http://anderspitman.com/2014/08/30/chrome-extension-pubsub/</guid>
      <description>

&lt;p&gt;This tutorial builds the same Chrome extension popup as my
&lt;a href=&#34;http://anderspitman.com/blog/2014/08/04/chrome-extension-content-script-stylesheet-isolation/&#34;&gt;Chrome Extension Content Script Stylesheet Isolation&lt;/a&gt;
tutorial, but uses the &lt;a href=&#34;https://github.com/anderspitman/chromeps&#34;&gt;chromeps&lt;/a&gt; pubsub module to make things easier.
For more detailed information, I highly recommend looking through that tutorial.&lt;/p&gt;

&lt;p&gt;You can get all the code for this tutorial from &lt;a href=&#34;https://github.com/anderspitman/chrome-extension-pubsub-example&#34;&gt;https://github.com/anderspitman/chrome-extension-pubsub-example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;background-info&#34;&gt;Background Info&lt;/h2&gt;

&lt;p&gt;When writing chrome extensions with content scripts, you often find yourself doing a lot of message passing.
If your content scripts include iframes, things get even more complicated because in order to communicate
between the content scripts and their iframes, you have to ferry the messages back and forth using the background
page. This can get messy very quickly. This tutorial serves as a simple but complete example of how to use
chromeps to help with these issues.&lt;/p&gt;

&lt;h2 id=&#34;objective&#34;&gt;Objective&lt;/h2&gt;

&lt;p&gt;To recap from the previous tutorial: we&amp;rsquo;ll be creating a simple chrome extension that uses a content scripts with
a popup that loads on every page the user opens. When the user clicks outside the popup it disappears. This
demonstrates the different types of message passing mentioned above.&lt;/p&gt;

&lt;h2 id=&#34;install-chromeps&#34;&gt;Install chromeps&lt;/h2&gt;

&lt;p&gt;Create a new empty directory for you extension and download &lt;code&gt;chromeps.js&lt;/code&gt; into it. You can get it from
&lt;a href=&#34;https://github.com/anderspitman/chromeps&#34;&gt;https://github.com/anderspitman/chromeps&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-chrome-extension&#34;&gt;Create a new Chrome Extension&lt;/h2&gt;

&lt;p&gt;Add the following manifest.json:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;manifest_version&amp;quot;: 2,
  &amp;quot;name&amp;quot;: &amp;quot;Chrome Extension PubSub&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;This extension demonstrates Content Script CSS Isolation with chromeps&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
  &amp;quot;background&amp;quot; : {
    &amp;quot;scripts&amp;quot; : [&amp;quot;chromeps.js&amp;quot;]
  },
  &amp;quot;content_scripts&amp;quot; : [
    {
      &amp;quot;matches&amp;quot; : [&amp;quot;&amp;lt;all_urls&amp;gt;&amp;quot;, &amp;quot;http://*/*&amp;quot;, &amp;quot;https://*/*&amp;quot;],
      &amp;quot;css&amp;quot; : [&amp;quot;content.css&amp;quot;],
      &amp;quot;js&amp;quot; : [&amp;quot;chromeps.js&amp;quot;, &amp;quot;content.js&amp;quot;]
    }
  ],
  &amp;quot;web_accessible_resources&amp;quot; : [&amp;quot;popup.html&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we are loading &lt;code&gt;chromeps.js&lt;/code&gt; into the background page (for this example we actually don&amp;rsquo;t have any
other logic for the background page), and also loading it each time a content script is loaded, which in this
case means any time the user opens a web page.&lt;/p&gt;

&lt;h2 id=&#34;add-content-script-and-style&#34;&gt;Add Content Script and Style&lt;/h2&gt;

&lt;p&gt;The manifest references several files that we will need to create. Let&amp;rsquo;s start
with content.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var iframe = document.createElement(&#39;iframe&#39;);
iframe.src = chrome.extension.getURL(&amp;quot;popup.html&amp;quot;);
iframe.className = &#39;css-isolation-popup&#39;;
iframe.frameBorder = 0;
document.body.appendChild(iframe);

chromeps.subscribe(&#39;commands&#39;, function(message) {
  if (message == &#39;hide_popup&#39;) {
    iframe.style.display = &#39;none&#39;;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we&amp;rsquo;re creating the iframe that will hold our popup. Try to make sure the
&lt;code&gt;className&lt;/code&gt; is something unique because this is the one style that may
still interfere with the page the user visits. I&amp;rsquo;m using &lt;code&gt;css-isolation-popup&lt;/code&gt;.
That style comes from content.css, which is referenced in the manifest. Let&amp;rsquo;s
add it real quick:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.css-isolation-popup {
  position: fixed;
  top: 0px;
  left: 0px;
  width: 100%;
  height: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m basically just giving the popup free reign over the entire window. It&amp;rsquo;s fine in
my case because I have a shaded overlay that surrounds the actual popup. You might need
to tweak this for your needs.&lt;/p&gt;

&lt;p&gt;Note that we&amp;rsquo;ve used chromeps to subscribe to the &amp;ldquo;commands&amp;rdquo; topic, so our callback will be invoked
any time a message on that topic is published anywhere in chrome.&lt;/p&gt;

&lt;h2 id=&#34;add-popup&#34;&gt;Add Popup&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s add the actual popup files, popup.html and popup.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
&amp;lt;style&amp;gt;
.overlay {
  position: fixed;
  top: 0%;
  left: 0%;
  width: 100%;
  height: 100%;
  background-color: black;
  z-index: 1000;
  opacity: .80;
}
.wrapper {
  position: fixed;
  top: 50%;
  left: 50%;
  width: 400px;
  height: 200px;
  margin-left: -200px;
  margin-top: -100px;
  text-align: center;
  background-color:#FFFFFF;
  z-index: 1100;
}
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
&amp;lt;div class=&#39;overlay&#39;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&#39;wrapper&#39;&amp;gt;
  &amp;lt;h1&amp;gt;Click outside to hide&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script src=&#39;chromeps.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&#39;popup.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mostly just styling. The overlay is a shaded region which will fill the window
surrounding our small popup. The popup lives inside the wrapper.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re sourcing &lt;code&gt;popup.js&lt;/code&gt; from within &lt;code&gt;popup.html&lt;/code&gt;. There&amp;rsquo;s no need to
add it in the manifest. We&amp;rsquo;re also including &lt;code&gt;chromeps.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var overlay = document.querySelector(&#39;.overlay&#39;);
overlay.addEventListener(&#39;click&#39;, function() {
  chromeps.publish(&#39;commands&#39;, &#39;hide_popup&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we&amp;rsquo;re handling when the user clicks outside the popup, in the overlay
region. When this happens we want to publish a signal to the content script to hide
our iframe.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;And that&amp;rsquo;s it. If you compare this to the previous tutorial, you&amp;rsquo;ll notice that we don&amp;rsquo;t need to explicitly
create a background page just for passing messages, since chromeps takes care of all the heavy lifting for us.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chrome Extension Content Script Stylesheet Isolation</title>
      <link>http://anderspitman.com/2014/08/04/chrome-extension-content-script-stylesheet-isolation/</link>
      <pubDate>Mon, 04 Aug 2014 08:52:47 +0000</pubDate>
      
      <guid>http://anderspitman.com/2014/08/04/chrome-extension-content-script-stylesheet-isolation/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;UPDATE 2014-08-30&lt;/strong&gt;: For a way to handle message passing using the
&lt;a href=&#34;https://github.com/anderspitman/chromeps&#34;&gt;chromeps&lt;/a&gt; pubsub module, see
&lt;a href=&#34;http://anderspitman.com/blog/2014/08/30/chrome-extension-pubsub/&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;background-info&#34;&gt;Background Info&lt;/h2&gt;

&lt;p&gt;When writing Chrome extensions, if you want to inject HTML and CSS into pages the user is
visiting, you use what&amp;rsquo;s called a
&lt;a href=&#34;https://developer.chrome.com/extensions/content_scripts&#34;&gt;content script&lt;/a&gt;.
One reason you might want to do this would be to build a custom popup
that activates on certain pages.&lt;/p&gt;

&lt;p&gt;One of the biggest problems people run in to is CSS corruption. The way that content
scripts work means that the CSS from your content script is merged with the CSS
from the page the user is visiting. This means that the page can corrupt what
your popup looks like, and the popup might mess up the page.
&lt;a href=&#34;http://stackoverflow.com/q/12783217/943814&#34;&gt;See here&lt;/a&gt;.
The ideal
situation is for your content script to run in a completely isolated environment.
Unfortunately this isn&amp;rsquo;t straightfoward. There are
&lt;a href=&#34;http://stackoverflow.com/a/20241247/943814&#34;&gt;a couple different options&lt;/a&gt;. The choice came down to IFrames vs Shadow DOM. I decided to try
Shadow DOM first.&lt;/p&gt;

&lt;p&gt;The Shadow DOM is (as of this writing) a new technology that is part of the upcoming
&lt;a href=&#34;http://webcomponents.org/&#34;&gt;Web Components&lt;/a&gt;. It&amp;rsquo;s very cool stuff.
When first trying to implement my popup I tried using the Shadow DOM, but I ran into
problems when
&lt;a href=&#34;http://stackoverflow.com/q/25048359/943814&#34;&gt;trying to run JavaScript&lt;/a&gt;
in my popup. This
&lt;a href=&#34;http://stackoverflow.com/a/25053376/943814&#34;&gt;led me to Custom Elements&lt;/a&gt;,
another web components feature. Since both shadow DOM and custom elements are very new
and not universally supported, at this point I decided to try
&lt;a href=&#34;http://www.polymer-project.org/&#34;&gt;Polymer&lt;/a&gt;.
Polymer is a project that provides nice wrappers around web components features, as well
as
&lt;a href=&#34;http://remysharp.com/2010/10/08/what-is-a-polyfill/&#34;&gt;polyfills&lt;/a&gt; for features that aren&amp;rsquo;t
implemented natively yet. Polymer turned out to be awesome, and did exactly what
I need, but unfortunately there is
&lt;a href=&#34;https://code.google.com/p/chromium/issues/detail?id=390807&#34;&gt;a bug&lt;/a&gt;
in the current version of chrome that
prevents custom elements from working in content scripts. Back to square one.&lt;/p&gt;

&lt;p&gt;Alright, that leaves us with the infamous iframe. This is the solution that
worked for me. In the end it was pretty strightforward. There are a couple
caveats, but nothing too bad. I&amp;rsquo;ll run through the basics of how I implemented
it.&lt;/p&gt;

&lt;p&gt;All of the code used in this example is available from the following github repo:
&lt;a href=&#34;https://github.com/anderspitman/chrome-extension-css-isolation-example&#34;&gt;https://github.com/anderspitman/chrome-extension-css-isolation-example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-chrome-extension&#34;&gt;Create a new Chrome Extension&lt;/h2&gt;

&lt;p&gt;Create an empty directory and add the following manifest.json:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;manifest_version&amp;quot;: 2,
  &amp;quot;name&amp;quot;: &amp;quot;CSS Isolation&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;This extension demonstrates Content Script CSS Isolation&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
  &amp;quot;background&amp;quot; : {
    &amp;quot;scripts&amp;quot; : [&amp;quot;background.js&amp;quot;]
  },
  &amp;quot;content_scripts&amp;quot; : [
    {
      &amp;quot;matches&amp;quot; : [&amp;quot;&amp;lt;all_urls&amp;gt;&amp;quot;, &amp;quot;http://*/*&amp;quot;, &amp;quot;https://*/*&amp;quot;],
      &amp;quot;css&amp;quot; : [&amp;quot;content.css&amp;quot;],
      &amp;quot;js&amp;quot; : [&amp;quot;content.js&amp;quot;]
    }
  ],
  &amp;quot;web_accessible_resources&amp;quot; : [&amp;quot;popup.html&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-content-script-and-style&#34;&gt;Add Content Script and Style&lt;/h2&gt;

&lt;p&gt;The manifest references several files that we will need to create. Let&amp;rsquo;s start
with content.js:&lt;/p&gt;

&lt;p&gt;```javascript content.js
var iframe = document.createElement(&amp;lsquo;iframe&amp;rsquo;);
iframe.src = chrome.extension.getURL(&amp;ldquo;popup.html&amp;rdquo;);
iframe.className = &amp;lsquo;css-isolation-popup&amp;rsquo;;
iframe.frameBorder = 0;
document.body.appendChild(iframe);&lt;/p&gt;

&lt;p&gt;chrome.runtime.onMessage.addListener(function(message) {
  iframe.style.display = &amp;lsquo;none&amp;rsquo;;
});&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Here we&#39;re creating the iframe that will hold our popup. Try to make sure the
`className` is something unique because this is the one style that may
still interfere with the page the user visits. I&#39;m using `css-isolation-popup`.
That style comes from content.css, which is referenced in the manifest. Let&#39;s
add it real quick:

```css content.css
.css-isolation-popup {
  position: fixed;
  top: 0px;
  left: 0px;
  width: 100%;
  height: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m basically just giving the popup free reign over the entire window. It&amp;rsquo;s fine in
my case because I have a shaded overlay that surrounds the actual popup. You might need
to tweak this for your needs.&lt;/p&gt;

&lt;h2 id=&#34;this-is-important&#34;&gt;This is Important&lt;/h2&gt;

&lt;p&gt;One other thing you&amp;rsquo;ll notice from content.js is the chrome message handler.
This brings up a very important point and huge caveat of content scripts in
general, and especially using iframes within content scripts. You cannot
directly access code within an iframe from other parts of your extension.
It must use the chrome message
passing to transfer information. In addition to this, the iframe
cannot pass messages directly to the content script. Therefore, the
iframe and content script must communicate with each other through
the background page. This is explained in more detail
&lt;a href=&#34;http://www.sitepoint.com/chrome-extensions-bridging-the-gap-between-layers/&#34;&gt;in this excellent post&lt;/a&gt;.
I think this will be much more clear once we finish our example.&lt;/p&gt;

&lt;h2 id=&#34;add-popup&#34;&gt;Add Popup&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s add the actual popup files, popup.html and popup.js:&lt;/p&gt;

&lt;p&gt;```html popup.html
&amp;lt;!doctype html&amp;gt;
&lt;html&gt;&lt;/p&gt;

&lt;p&gt;&lt;head&gt;
&lt;style&gt;
.overlay {
  position: fixed;
  top: 0%;
  left: 0%;
  width: 100%;
  height: 100%;
  background-color: black;
  z-index: 1000;
  opacity: .80;
}
.wrapper {
  position: fixed;
  top: 50%;
  left: 50%;
  width: 400px;
  height: 200px;
  margin-left: -200px;
  margin-top: -100px;
  text-align: center;
  background-color:#FFFFFF;
  z-index: 1100;
}
&lt;/style&gt;
&lt;/head&gt;&lt;/p&gt;

&lt;p&gt;&lt;body&gt;
&lt;div class=&#39;overlay&#39;&gt;&lt;/div&gt;
&lt;div class=&#39;wrapper&#39;&gt;
  &lt;h1&gt;Click outside to hide&lt;/h1&gt;
&lt;/div&gt;
&lt;script src=&#39;popup.js&#39;&gt;&lt;/script&gt;
&lt;/body&gt;&lt;/p&gt;

&lt;p&gt;&lt;/html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Mostly just styling. The overlay is a shaded region which will fill the window
surrounding our small popup. The popup lives inside the wrapper. I want to stress the
fact that everything in here is completely isolated from whatever page the user
is visiting. We can name our classes whatever we want with no fear of
name collisions from the outside world. Perfect!

We&#39;re sourcing popup.js from within popup.html. There&#39;s no need to
add it in the manifest.

```javascript popup.js
chrome.runtime.onMessage.addListener(function(message) {
  if (message == &#39;hide_popup&#39;) {
    iframe.style.display = &#39;none&#39;;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we&amp;rsquo;re handling when the user clicks outside the popup, in the overlay
region. When this happens we want to signal the content script to hide
our iframe. But remember what we said earlier: we can&amp;rsquo;t communicate
directly with the content script, so we need to send the message to
the background page and have it forward it to the content script.&lt;/p&gt;

&lt;h2 id=&#34;add-background-page&#34;&gt;Add Background Page&lt;/h2&gt;

&lt;p&gt;Add the background page as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript background.js
chrome.runtime.onMessage.addListener(function(message, sender) {
  chrome.tabs.sendMessage(sender.tab.id, message);
});
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Literally all it does is repeat whatever messages it receives back out to the
tab it received it from. It&amp;rsquo;s worth noting here that both content.js and
popup.js will receive the forwarded message, so it&amp;rsquo;s actually being
reflected back to the popup where it originated.&lt;/p&gt;

&lt;p&gt;So at the end of the day, here&amp;rsquo;s what happens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User clicks shaded region&lt;/li&gt;
&lt;li&gt;popup.js detects the click and sends the message &lt;code&gt;hide_popup&lt;/code&gt; to background.js&lt;/li&gt;
&lt;li&gt;background.js receives the message, and broadcasts it to the tab where it originated&lt;/li&gt;
&lt;li&gt;content.js receives the message, and if it is &lt;code&gt;hide_popup&lt;/code&gt; it hides the iframe&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;And there you have it! Load this puppy into chrome, and any page you visit should
display a popup. Clicking in the faded area around it makes it disappear.
This is a barebones example to be sure but it should
be fairly straightforward to augment with additional functionality.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Asterisk ARI Quickstart Tutorial in Python</title>
      <link>http://anderspitman.com/2014/07/21/asterisk-ari-quickstart-in-python/</link>
      <pubDate>Mon, 21 Jul 2014 10:41:56 +0000</pubDate>
      
      <guid>http://anderspitman.com/2014/07/21/asterisk-ari-quickstart-in-python/</guid>
      <description>

&lt;p&gt;The purpose of this post is to get Asterisk users up and running with the Asterisk 12 ARI
with Python as quickly as possible. I&amp;rsquo;m assuming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You know what the ARI is&lt;/li&gt;
&lt;li&gt;You know at least the basics of using Asterisk&lt;/li&gt;
&lt;li&gt;You have Asterisk 12 installed&lt;/li&gt;
&lt;li&gt;You have Python with pip installed (preferably inside a virtualenv)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I followed this other tutorial closely, particularly the implementation of
the websocket stuff:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.asterisk.org/wiki/display/AST/Getting+Started+with+ARI&#34;&gt;https://wiki.asterisk.org/wiki/display/AST/Getting+Started+with+ARI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more info refer to the &lt;a href=&#34;https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+ARI&#34;&gt;Official ARI Page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that I&amp;rsquo;m implementing my own interface for the REST calls, since it&amp;rsquo;s
a simple example. For a full blown application you&amp;rsquo;ll probably want to use something
like &lt;a href=&#34;https://github.com/kickstandproject/python-ari&#34;&gt;python-ari&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;set-up-asterisk&#34;&gt;Set up Asterisk&lt;/h2&gt;

&lt;h3 id=&#34;enable-http-server&#34;&gt;Enable HTTP server&lt;/h3&gt;

&lt;p&gt;Asterisk&amp;rsquo;s HTTP server is disabled by default. Open &lt;strong&gt;http.conf&lt;/strong&gt; and make sure
the following are uncommented.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enabled=yes
bindaddr=127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;enable-and-set-up-ari&#34;&gt;Enable and set up ARI&lt;/h3&gt;

&lt;p&gt;Open &lt;strong&gt;ari.conf&lt;/strong&gt; and uncomment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enabled=yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add the following to the end of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[hey]
type=user
password=peekaboo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-an-extension&#34;&gt;Create an extension&lt;/h3&gt;

&lt;p&gt;We need an entry point for Asterisk to pass control into our ARI app. Just
set up an extension that opens the Statis app as shown below. I&amp;rsquo;m using
extension 100 in the example &lt;strong&gt;extensions.conf&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[default]
exten =&amp;gt; 100,1,Noop()
      same =&amp;gt; n,Stasis(hello,world) ; hello is the name of the application
                                    ; world is its argument list
      same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-the-code&#34;&gt;Get the Code&lt;/h2&gt;

&lt;p&gt;Either clone my repo at &lt;a href=&#34;https://github.com/anderspitman/ari-quickstart&#34;&gt;https://github.com/anderspitman/ari-quickstart&lt;/a&gt; or
just copy and paste the script from below.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need to install requests and websocket-client. If you cloned the
repo just do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise install them manually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install requests websocket-client
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python

import json
import sys
import websocket
import threading
import Queue
import requests


class ARIInterface(object):
    def __init__(self, server_addr, username, password):
        self._req_base = &amp;quot;http://%s:8088/ari/&amp;quot; % server_addr
        self._username = username
        self._password = password

    def answer_call(self, channel_id):
        req_str = self._req_base+&amp;quot;channels/%s/answer&amp;quot; % channel_id
        self._send_post_request(req_str)

    def play_sound(self, channel_id, sound_name):
        req_str = self._req_base+(&amp;quot;channels/%s/play?media=sound:%s&amp;quot; % (channel_id, sound_name))
        self._send_post_request(req_str)

    def _send_post_request(self, req_str):
        r = requests.post(req_str, auth=(self._username, self._password))


class ARIApp(object):
    def __init__(self, server_addr):
        app_name = &#39;hello&#39;
        username = &#39;hey&#39;
        password = &#39;peekaboo&#39;
        url = &amp;quot;ws://%s:8088/ari/events?app=%s&amp;amp;api_key=%s:%s&amp;quot; % (server_addr, app_name, username, password)
        ari = ARIInterface(server_addr, username, password)
        ws = websocket.create_connection(url)

        try:
            for event_str in iter(lambda: ws.recv(), None):
                event_json = json.loads(event_str)

                json.dump(event_json, sys.stdout, indent=2, sort_keys=True,
                          separators=(&#39;,&#39;, &#39;: &#39;))
                print(&amp;quot;\n\nWebsocket event***************************************************\n&amp;quot;)

                if event_json[&#39;type&#39;] == &#39;StasisStart&#39;:
                    ari.answer_call(event_json[&#39;channel&#39;][&#39;id&#39;])
                    ari.play_sound(event_json[&#39;channel&#39;][&#39;id&#39;], &#39;tt-monkeys&#39;)
        except websocket.WebSocketConnectionClosedException:
            print(&amp;quot;Websocket connection closed&amp;quot;)
        except KeyboardInterrupt:
            print(&amp;quot;Keyboard interrupt&amp;quot;)
        finally:
            if ws:
                ws.close()


if __name__ == &amp;quot;__main__&amp;quot;:
    app = ARIApp(&#39;localhost&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;try-it-out&#34;&gt;Try it Out&lt;/h2&gt;

&lt;p&gt;Start/Restart Asterisk and once it&amp;rsquo;s up run the script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python ari-quickstart.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it doesn&amp;rsquo;t throw any exceptions it should be connected and listening for ARI
events. Dial the Statis extension (100 in my case) and you should hear monkeys.&lt;/p&gt;

&lt;p&gt;The script should be easy to modify to add more functionality. It&amp;rsquo;s a good
starting point for creating more full featured apps. The biggest thing
to worry about is that there&amp;rsquo;s a good chance you won&amp;rsquo;t want your app
blocking on the websocket receive calls. A simple solution is to handle
events in a separate thread and use a Python queue to pass the received
messages in.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up an IPython Development Environment from Source</title>
      <link>http://anderspitman.com/2014/06/15/setting-up-an-ipython-development-environment-from-source/</link>
      <pubDate>Sun, 15 Jun 2014 22:40:00 +0000</pubDate>
      
      <guid>http://anderspitman.com/2014/06/15/setting-up-an-ipython-development-environment-from-source/</guid>
      <description>

&lt;p&gt;I recently decided to start hacking on the excellent &lt;a href=&#34;http://ipython.org/&#34;&gt;IPython&lt;/a&gt;
project. I wanted
to have full control over the versions of all the software involved, which
meant compiling Python from source. This guide is intended to take one through
the entire process of setting up a custom Python build with virtualenv in the
least number of steps possible, with the final goal of building a virtualenv
specifically for IPython dev work.&lt;/p&gt;

&lt;p&gt;For this guide I&amp;rsquo;m using Mint 17 (based on Ubuntu 14.04). Most of the commands
should be very similar for most modern Linux systems. The biggest things that
will be different is installing build dependencies. Usually on debian based
system that will involve something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install build-essential
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And maybe a few other packages.&lt;/p&gt;

&lt;h2 id=&#34;building-and-installing-python&#34;&gt;Building and Installing Python&lt;/h2&gt;

&lt;p&gt;For this example I will be installing to /opt/python277. First, create the
directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/python277
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ll get the python source.
I want to use the latest Python 2.7. As of this writing it&amp;rsquo;s 2.7.7.
get it &lt;a href=&#34;https://www.python.org/ftp/python/2.7.7/Python-2.7.7.tar.xz&#34;&gt;here&lt;/a&gt;.
You should be able to follow these instructions with any 2.7.x version. 3.x
should work as well, but might be a little different.&lt;/p&gt;

&lt;p&gt;Extract the downloaded tarball and go into the directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xvf Python-2.7.7.tar.xz
cd Python-2.7.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will now configure Python source:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export LD_RUN_PATH=/opt/python277/lib
./configure --prefix=/opt/python277 --enable-shared
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we&amp;rsquo;re doing here is telling python to install to /opt/python277
and to be available as a shared library. This is important for
certain packages such as PySide, which we&amp;rsquo;ll install later. The LD_RUN_PATH tells it which
library our python executable should link against at runtime. If
we didn&amp;rsquo;t set that environment variable, it would link against the
system&amp;rsquo;s python library, which causes all sorts of confusion.&lt;/p&gt;

&lt;p&gt;Now make and install:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install a fresh python into /opt/python277. You can test it by running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/python277/bin/python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should get a python 2.7.7 prompt.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-package-management-and-virtualenv&#34;&gt;Setting up Package Management and virtualenv&lt;/h2&gt;

&lt;p&gt;The next thing we want to do is get pip up and running as quickly as possible,
so that we can use it for all our package management. We&amp;rsquo;ll download pip
directory from pypi. It depends on setuptools, so download that
&lt;a href=&#34;https://pypi.python.org/packages/source/s/setuptools/setuptools-4.0.1.tar.gz#md5=190b1d4470de9bae0b4414353e14700d&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then extract and install it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xzvf setuptools-4.0.1.tar.gz
cd setuptools-4.0.1/
sudo /opt/python277/bin/python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now do the same thing with pip. The one I used is
&lt;a href=&#34;https://pypi.python.org/packages/source/p/pip/pip-1.5.6.tar.gz#md5=01026f87978932060cc86c1dc527903e&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xzvf pip-1.5.6.tar.gz
cd pip-1.5.6/
sudo /opt/python277/bin/python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alright, we should now be able to install most python packages from pypi simply
with pip now. The first thing we need is virtualenv. If you&amp;rsquo;re not familiar with
virtualenv, it&amp;rsquo;s awesome. Check it out &lt;a href=&#34;http://virtualenv.readthedocs.org/en/latest/&#34;&gt;here&lt;/a&gt;.
Install it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo /opt/python277/bin/pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;set-up-ipython-virtualenv&#34;&gt;Set up IPython virtualenv&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll now create a virtualenv just for ipython development. I like to keep my
virtualenvs in ~/virt_python.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/virt_python
cd ~/virt_python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the virtualenv. I&amp;rsquo;ll call it &amp;ldquo;ipython-dev&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/python277/bin/virtualenv ipython-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Activate it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ipython-dev/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run python or pip it will use the executables in
~/virt_python/ipython-dev, and any packages we install with pip
will only affect our ipython virtualenv.&lt;/p&gt;

&lt;h2 id=&#34;install-dependencies&#34;&gt;Install Dependencies&lt;/h2&gt;

&lt;p&gt;The IPython dependencies we need will depend on which parts of IPython you want
to work on. For example, to run the notebook we&amp;rsquo;ll want numpy, ZeroMQ, jinja,
and tornado. It&amp;rsquo;s now simply a
matter of using pip:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install numpy pyzmq jinja2 tornado
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively you can install the dependencies for a specific IPython console
automatically as explained below.&lt;/p&gt;

&lt;p&gt;I want to run the IPython QT console, which depends on QT. I like the &lt;a href=&#34;http://qt-project.org/wiki/pyside&#34;&gt;PySide&lt;/a&gt;
python bindings. First install QT. On my system I needed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install qt4-default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then install PySide:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PYTHON_INCLUDE_DIRS=/opt/python277/lib
pip install pyside
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to set PYTHON_INCLUDE_DIRS so that qmake knows what to build against.&lt;/p&gt;

&lt;h2 id=&#34;get-the-ipython-source&#34;&gt;Get the IPython Source&lt;/h2&gt;

&lt;p&gt;Clone the repository from github into ~/ipython-dev:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd
git clone https://github.com/ipython/ipython ipython-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install dependencies for the IPython notebook with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -e &amp;quot;.[notebook]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This also creates an IPython executable in your virtualenv so as long as it is
active you can simply run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ipython
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to run IPython from your development source.&lt;/p&gt;

&lt;p&gt;You should now be set to start hacking!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>