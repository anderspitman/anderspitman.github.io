<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Anders Pitman&#39;s blog</title>
    <link>https://anderspitman.github.io/</link>
    <description>Recent content on Anders Pitman&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Apr 2018 21:21:00 +0000</lastBuildDate>
    
	<atom:link href="https://anderspitman.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Making a 100% Statically-Linked Single-File Web App with React and Rust</title>
      <link>https://anderspitman.github.io/2018/04/04/static-react-rust-webapp/</link>
      <pubDate>Wed, 04 Apr 2018 21:21:00 +0000</pubDate>
      
      <guid>https://anderspitman.github.io/2018/04/04/static-react-rust-webapp/</guid>
      <description>This tutorial will cover the basics of creating a minimal React app which can be deployed as a statically-linked Rust binary.
Why?  Simpler deployment. Having a static binary means you just have to copy the file to your servers and run it. Cross platform GUI apps. One of the biggest challenges in creating cross-platform GUI app is working with a GUI library that targets all the platforms you&amp;rsquo;re interested in.</description>
    </item>
    
    <item>
      <title>Fix for Vimium that Stopped Working</title>
      <link>https://anderspitman.github.io/2014/12/17/fix-for-vimium-that-stopped-working/</link>
      <pubDate>Wed, 17 Dec 2014 17:30:55 +0000</pubDate>
      
      <guid>https://anderspitman.github.io/2014/12/17/fix-for-vimium-that-stopped-working/</guid>
      <description>I love the Vimium extension for Chrome. It basically provides VIM keybindings for Chrome. But some of the bindings randomly quit working a while back, probably after a Chrome update. A quick search didn&amp;rsquo;t yield a simple fix, so I just put up with it for an embarrassingly long time. Finally today I did a bit more digging. Some of the issues on github seemed to indicate local Chrome data might get messed up from updates.</description>
    </item>
    
    <item>
      <title>How to Install the Google Play Store on Your Amazon Fire Phone</title>
      <link>https://anderspitman.github.io/2014/12/01/how-to-install-the-play-store-on-your-fire-phone/</link>
      <pubDate>Mon, 01 Dec 2014 22:43:09 +0000</pubDate>
      
      <guid>https://anderspitman.github.io/2014/12/01/how-to-install-the-play-store-on-your-fire-phone/</guid>
      <description>Background The last few days Amazon has been having a &amp;ldquo;fire sale&amp;rdquo; selling their fire phone for 199USD unlocked and off contract, plus a year of Amazon prime (~99USD). Given the hardware this was a little to good for me to pass up. Arguably the biggest problem with the Fire Phone (and all Amazon&amp;rsquo;s devices) is that it doesn&amp;rsquo;t have access to Google&amp;rsquo;s Play Store, and the OS and bootloader are locked down tight which makes it somewhere between difficult and impossible to install ROMs at the moment.</description>
    </item>
    
    <item>
      <title>Chrome Extension PubSub</title>
      <link>https://anderspitman.github.io/2014/08/30/chrome-extension-pubsub/</link>
      <pubDate>Sat, 30 Aug 2014 22:35:24 +0000</pubDate>
      
      <guid>https://anderspitman.github.io/2014/08/30/chrome-extension-pubsub/</guid>
      <description>This tutorial builds the same Chrome extension popup as my Chrome Extension Content Script Stylesheet Isolation tutorial, but uses the chromeps pubsub module to make things easier. For more detailed information, I highly recommend looking through that tutorial.
You can get all the code for this tutorial from https://github.com/anderspitman/chrome-extension-pubsub-example
Background Info When writing chrome extensions with content scripts, you often find yourself doing a lot of message passing. If your content scripts include iframes, things get even more complicated because in order to communicate between the content scripts and their iframes, you have to ferry the messages back and forth using the background page.</description>
    </item>
    
    <item>
      <title>Chrome Extension Content Script Stylesheet Isolation</title>
      <link>https://anderspitman.github.io/2014/08/04/chrome-extension-content-script-stylesheet-isolation/</link>
      <pubDate>Mon, 04 Aug 2014 08:52:47 +0000</pubDate>
      
      <guid>https://anderspitman.github.io/2014/08/04/chrome-extension-content-script-stylesheet-isolation/</guid>
      <description>UPDATE 2014-08-30: For a way to handle message passing using the chromeps pubsub module, see this post.
Background Info When writing Chrome extensions, if you want to inject HTML and CSS into pages the user is visiting, you use what&amp;rsquo;s called a content script. One reason you might want to do this would be to build a custom popup that activates on certain pages.
One of the biggest problems people run in to is CSS corruption.</description>
    </item>
    
    <item>
      <title>Asterisk ARI Quickstart Tutorial in Python</title>
      <link>https://anderspitman.github.io/2014/07/21/asterisk-ari-quickstart-in-python/</link>
      <pubDate>Mon, 21 Jul 2014 10:41:56 +0000</pubDate>
      
      <guid>https://anderspitman.github.io/2014/07/21/asterisk-ari-quickstart-in-python/</guid>
      <description>The purpose of this post is to get Asterisk users up and running with the Asterisk 12 ARI with Python as quickly as possible. I&amp;rsquo;m assuming:
 You know what the ARI is You know at least the basics of using Asterisk You have Asterisk 12 installed You have Python with pip installed (preferably inside a virtualenv)  I followed this other tutorial closely, particularly the implementation of the websocket stuff:</description>
    </item>
    
    <item>
      <title>Setting up an IPython Development Environment from Source</title>
      <link>https://anderspitman.github.io/2014/06/15/setting-up-an-ipython-development-environment-from-source/</link>
      <pubDate>Sun, 15 Jun 2014 22:40:00 +0000</pubDate>
      
      <guid>https://anderspitman.github.io/2014/06/15/setting-up-an-ipython-development-environment-from-source/</guid>
      <description>I recently decided to start hacking on the excellent IPython project. I wanted to have full control over the versions of all the software involved, which meant compiling Python from source. This guide is intended to take one through the entire process of setting up a custom Python build with virtualenv in the least number of steps possible, with the final goal of building a virtualenv specifically for IPython dev work.</description>
    </item>
    
  </channel>
</rss>